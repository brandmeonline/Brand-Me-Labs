#!/bin/bash

# Copyright (c) Brand.Me, Inc. All rights reserved.
#
# Test Wallet Setup Script
# ========================
# Generates a test wallet and guides through testnet funding

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo "======================================"
echo "Brand.Me Chain - Test Wallet Setup"
echo "======================================"
echo ""

# Check if Node.js is available
if ! command -v node &> /dev/null; then
    echo "❌ Error: Node.js is required but not installed"
    exit 1
fi

# Check if pnpm is available
if ! command -v pnpm &> /dev/null; then
    echo "❌ Error: pnpm is required but not installed"
    echo "Install with: npm install -g pnpm"
    exit 1
fi

# Generate mnemonic
echo "🔐 Generating BIP39 mnemonic phrase..."
MNEMONIC=$(node -e "const bip39 = require('bip39'); console.log(bip39.generateMnemonic(256))")

if [ -z "$MNEMONIC" ]; then
    echo "❌ Error: Failed to generate mnemonic"
    exit 1
fi

# Save mnemonic to secure location
WALLET_DIR="$PROJECT_ROOT/.wallet-test"
mkdir -p "$WALLET_DIR"
chmod 700 "$WALLET_DIR"

MNEMONIC_FILE="$WALLET_DIR/mnemonic.txt"
echo "$MNEMONIC" > "$MNEMONIC_FILE"
chmod 600 "$MNEMONIC_FILE"

echo "✅ Mnemonic phrase saved to: $MNEMONIC_FILE"
echo ""

# Get wallet address
echo "📍 Deriving wallet address..."

# Create a temporary Node script to get the address
cat > /tmp/get-address.js << EOF
const bip39 = require('bip39');
const CardanoWasm = require('@emurgo/cardano-serialization-lib-nodejs');
const fs = require('fs');

const mnemonic = fs.readFileSync('$MNEMONIC_FILE', 'utf-8').trim();
const entropy = bip39.mnemonicToEntropy(mnemonic);

const rootKey = CardanoWasm.Bip32PrivateKey.from_bip39_entropy(
  Buffer.from(entropy, 'hex'),
  Buffer.from('')
);

// Cardano derivation path: m/1852'/1815'/0'/0/0
const accountKey = rootKey
  .derive(0x80000000 + 1852)  // 1852' (hardened)
  .derive(0x80000000 + 1815)  // 1815' (hardened)
  .derive(0x80000000 + 0);    // 0' (hardened)

const addressKey = accountKey.derive(0).derive(0);
const privateKey = addressKey.to_raw_key();
const publicKey = privateKey.to_public();

// Create testnet address (network = 0 for testnet)
const network = CardanoWasm.NetworkInfo.testnet().network_id();
const address = CardanoWasm.BaseAddress.new(
  network,
  CardanoWasm.StakeCredential.from_keyhash(publicKey.hash()),
  CardanoWasm.StakeCredential.from_keyhash(publicKey.hash())
).to_address();

console.log(address.to_bech32());
EOF

cd "$PROJECT_ROOT"
ADDRESS=$(node /tmp/get-address.js 2>/dev/null || echo "")
rm -f /tmp/get-address.js

if [ -z "$ADDRESS" ]; then
    echo "⚠️  Warning: Could not derive address automatically"
    echo "You'll see the address when you start the service"
else
    echo "✅ Wallet Address: $ADDRESS"
fi

echo ""
echo "======================================"
echo "⚠️  IMPORTANT: Save Your Mnemonic"
echo "======================================"
echo ""
echo "Your 24-word mnemonic phrase:"
echo "---"
echo "$MNEMONIC"
echo "---"
echo ""
echo "⚠️  Keep this safe! Anyone with this phrase can access your wallet."
echo "⚠️  This is a TEST wallet only. DO NOT use for mainnet."
echo ""

# Fund wallet instructions
if [ -n "$ADDRESS" ]; then
    echo "======================================"
    echo "💰 Fund Your Test Wallet"
    echo "======================================"
    echo ""
    echo "1. Visit the Cardano Testnet Faucet:"
    echo "   https://docs.cardano.org/cardano-testnet/tools/faucet/"
    echo ""
    echo "2. Enter your address:"
    echo "   $ADDRESS"
    echo ""
    echo "3. Request 1000 tADA (testnet ADA)"
    echo ""
    echo "4. Wait ~20 seconds for confirmation"
    echo ""
fi

# Setup environment
echo "======================================"
echo "⚙️  Environment Setup"
echo "======================================"
echo ""

ENV_FILE="$PROJECT_ROOT/.env.integration"
cat > "$ENV_FILE" << EOF
# Integration Test Environment
# Generated by setup-test-wallet.sh

CARDANO_NETWORK=preprod
CARDANO_MNEMONIC_PATH=$MNEMONIC_FILE
CARDANO_FALLBACK_MODE=false

# Get your Blockfrost API key from: https://blockfrost.io
# Create a PREPROD project and paste the project ID here
BLOCKFROST_API_KEY=preprodXXXXXXXXXXXXXXXXXXXXXXXXXXXX

MIDNIGHT_NETWORK=testnet
MIDNIGHT_FALLBACK_MODE=true
EOF

echo "✅ Created .env.integration file"
echo ""
echo "Next steps:"
echo "1. Get a Blockfrost API key:"
echo "   - Sign up at https://blockfrost.io (free tier)"
echo "   - Create a PREPROD project"
echo "   - Copy the project ID"
echo ""
echo "2. Edit .env.integration and paste your Blockfrost API key"
echo ""
echo "3. Fund your wallet from the testnet faucet (see above)"
echo ""
echo "4. Run integration tests:"
echo "   export \$(cat .env.integration | xargs)"
echo "   INTEGRATION=true pnpm test:integration"
echo ""
echo "======================================"
echo "✅ Setup Complete!"
echo "======================================"
